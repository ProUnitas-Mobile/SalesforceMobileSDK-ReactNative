ENV['DEVICE'] = 'iPhone-SE-3rd-generation' unless ENV.has_key?('DEVICE')
ENV['IOS_VERSION'] = '15.5' unless ENV.has_key?('IOS_VERSION')

lane :build do
    analyze_scheme("SalesforceReactTestApp")
end

lane :test do
    test_scheme("SalesforceReactTestApp")
end

def test_scheme(scheme)
    device = ENV['DEVICE'].gsub(' ', '-')
    ios_code = ENV['IOS_VERSION'].gsub('.', '-')
    system('xcrun simctl delete test_device') or true
    sim_id = `xcrun simctl create test_device com.apple.CoreSimulator.SimDeviceType.#{device} com.apple.CoreSimulator.SimRuntime.iOS-#{ios_code}`.delete("\n")
    ios_version = `xcrun xctrace list devices | grep test_device | awk -F"[()]" '{print $2}'`.delete("\n")
    
    if (ios_version.empty?) 
      UI.user_error!('Invalid Test Device.')
    end

    scan(
        workspace: '../iosTests/ios/SalesforceReactTestApp.xcworkspace',
        scheme: scheme,
        device: "test_device (#{ios_version})",
        output_directory: './test_output',
        output_types: 'html,junit',
        code_coverage: true,
        skip_build: true
    )
end

def analyze_scheme(scheme)
    xcodebuild(
        xcargs: 'CLANG_ANALYZER_OUTPUT=plist-html CLANG_ANALYZER_OUTPUT_DIR=./clangReport RUN_CLANG_STATIC_ANALYZER=YES ARCHS=x86_64',
        workspace: '../iosTests/ios/SalesforceReactTestApp.xcworkspace',
        scheme: scheme,
        sdk: 'iphonesimulator',
    )
end